{"version":3,"sources":["components/ChatFeed/ChatFeed.jsx","components/MessageForm/MessageForm.jsx","components/MyMessage/MyMessage.jsx","components/TheirMessage/TheirMessage.jsx","components/LoginForm/LoginForm.jsx","components/Footer/Footer.jsx","App.js","index.js","components/Footer/Footer.module.css"],"names":["ChatFeed","props","chats","activeChat","userName","messages","chat","renderReadReceipts","message","isMyMessage","people","map","person","index","last_read","id","className","style","float","backgroundImage","avatar","title","username","keys","Object","key","lastMessageKey","sender","width","lastMessage","marginRight","marginLeft","renderMessages","height","chatId","MessageForm","useState","value","setValue","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","display","files","bind","SendOutlined","MyMessage","attachments","src","file","alt","color","backgroundColor","TheirMessage","isFirstMessageByUser","Modal","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","Footer","footer","footer__title","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","LoginForm","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6eb13547.chunk.js","sourcesContent":["import { MyMessage, TheirMessage, MessageForm } from '../../components'\n\nconst ChatFeed = (props) => {\n    const { chats, activeChat, userName, messages } = props;\n\n    const chat = chats && chats[activeChat];\n\n    //Funcion que verifica la leida del mensaje\n    const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n        <div\n            key={`read_${index}`}\n            className=\"read-receipt\"\n            style={{\n                float: isMyMessage ? 'right' : 'left',\n                backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n            }}\n        />\n    ));\n    // Funcion para renderizar los mensajes de la aplicacion\n    const renderMessages = () => {\n        const keys = Object.keys(messages);\n\n        return keys.map((key, index) => {\n            const message = messages[key];\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\n            const isMyMessage = userName === message.sender.username;\n\n            return (\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\n                    {/* se condiciona si el mensaje es enviado o recibido */}\n                    <div className=\"message-block\">\n                        {\n                            isMyMessage\n                                ? <MyMessage message={message} />\n                                : <TheirMessage\n                                    message={message}\n                                    lastMessage={messages[lastMessageKey]}\n                                />\n                        }\n                    </div>\n                    {/* Se llama la funcion de la leida de mensaje */}\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n                        {renderReadReceipts(message, isMyMessage)}\n                    </div>\n                </div>\n            );\n        });\n    };\n    //verificar si existe un chat\n    if (!chat) return <div />;\n\n    return (\n        //se renderiza el encabezado de la pagina del chat\n        <div className=\"chat-feed\">\n            <div className=\"chat-title-container\">\n                <div className=\"chat-title\">{chat?.title}</div>\n                <div className=\"chat-subtitle\">\n                    {chat.people.map((person) => ` ${person.person.username}`)}\n                </div>\n            </div>\n            {renderMessages()}\n            <div style={{ height: '100px' }} />\n            {/* Llamado al componente del formulario con el input para el envio de los mensajes */}\n            <div className=\"message-form-container\">\n                <MessageForm {...props} chatId={activeChat} />\n            </div>\n        </div>\n    );\n};\n\nexport default ChatFeed;\n\n","import { useState } from 'react';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\nimport { sendMessage, isTyping } from 'react-chat-engine';\n\nconst MessageForm = (props) => {\n  const [value, setValue] = useState('');\n  const { chatId, creds } = props;\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n\n    isTyping(props, chatId);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const text = value.trim();\n\n    if (text.length > 0) {\n      sendMessage(creds, chatId, { text });\n    }\n\n    setValue('');\n  };\n\n  const handleUpload = (event) => {\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\n  };\n\n  return (\n    <form className=\"message-form\" onSubmit={handleSubmit}>\n      <input\n        className=\"message-input\"\n        placeholder=\"Send a message...\"\n        value={value}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n      <label htmlFor=\"upload-button\">\n        <span className=\"image-button\">\n          <PictureOutlined className=\"picture-icon\" />\n        </span>\n      </label>\n      <input\n        type=\"file\"\n        multiple={false}\n        id=\"upload-button\"\n        style={{ display: 'none' }}\n        onChange={handleUpload.bind(this)}\n      />\n      <button type=\"submit\" className=\"send-button\">\n        <SendOutlined className=\"send-icon\" />\n      </button>\n    </form>\n  );\n};\n\nexport default MessageForm;\n","//***MENSAJE QUE SE ENVIA***/\n\nconst MyMessage = ({ message }) => {\n  //verificar si el mensaje que se envia es una imagen\n    if (message.attachments && message.attachments.length > 0) {\n    return (\n      <img\n        src={message.attachments[0].file}\n        alt=\"message-attachment\"\n        className=\"message-image\"\n        style={{ float: 'right' }}\n      />\n    );\n  }\n\n  return (\n      //se retorna el contenido del mensaje\n    <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#0672E5' }}>\n      {message.text}\n    </div>\n  );\n};\n\nexport default MyMessage;\n","//***MENSAJE QUE SE RECIBE***/\n\nconst TheirMessage = ({ lastMessage, message }) => {\n  const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\n\n  return ( /* Se genera la imagen del avatar de la persona que envia el mensaje */\n    <div className=\"message-row\">\n      {isFirstMessageByUser && (\n        <div\n          className=\"message-avatar\"\n          style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\n        />\n      )}\n      {/* Se valida si el mensaje es un texto o una imagen y se renderiza */}\n      {message.attachments && message.attachments.length > 0\n        ? (\n          <img\n            src={message.attachments[0].file}\n            alt=\"message-attachment\"\n            className=\"message-image\"\n            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n          />\n        )\n        : (\n          <div className=\"message\" style={{ float: 'left', backgroundColor: '#0672e577', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\n            {message.text}\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default TheirMessage;\n","import { useState } from \"react\";\nimport axios from \"axios\";\nimport {Footer} from '../../components'\n\n\n\nconst Modal = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    //Se solicita: usuario | contraseña - se le pide a la API los mensajes\n    //Si los datos son correctos -> inicia seccion\n    //Si no son correctos, arrojara un error\n\n    const authObject = {\n      'Project-ID' : \"bdb30ced-ceea-436e-bdba-872a97124968\",\n      'User-Name': username, \n      'User-Secret': password\n    }\n    try {\n      //Se solicita: usuario | contraseña - se le pide a la API los mensajes\n      await axios.get('https://api.chatengine.io/chats', {headers: authObject});\n      //Si los datos son correctos -> inicia seccion\n\n      localStorage.setItem('username', username)\n      localStorage.setItem('password', password)\n\n      window.location.reload();\n    } catch (error) {\n\n      setError('Oops, verifica tu usuario o contraseña')\n\n      //Si no son correctos, arrojara un error\n    }\n\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n        <h1 className=\"title\">ConexionApp</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            className=\"input\"\n            placeholder=\"Usuario\"\n            required\n          />\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"input\"\n            placeholder=\"Contraseña\"\n            required\n          />\n          <div align=\"center\">\n            <button type=\"submit\" className=\"button\">\n              <span className=\"text-submit\" >Comienza a chatear</span>\n            </button>\n          </div>\n        </form>\n        <span className=\"login-error\" >{error}</span>\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\r\n\r\nimport style from \"../Footer/Footer.module.css\";\r\n\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className={style.footer}>\r\n      \r\n        <h2 className={style.footer__title}>Desarrollado por Elian Acosta.</h2>\r\n    \r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { ChatEngine } from 'react-chat-engine';\r\nimport './App.css'\r\nimport {ChatFeed, LoginForm} from './components'\r\n\r\nfunction App() {\r\n\r\n  if(!localStorage.getItem('username')) return <LoginForm />\r\n\r\n  return (\r\n  <ChatEngine\r\n  height=\"100vh\"\r\n  projectID=\"bdb30ced-ceea-436e-bdba-872a97124968\"\r\n  userName={localStorage.getItem('username')}\r\n  userSecret={localStorage.getItem('password')}\r\n  renderChatFeed={(chatAppProps)=> <ChatFeed {...chatAppProps} />} \r\n\r\n  />\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3XkmW\",\"footer__title\":\"Footer_footer__title__2QpVX\",\"footer__copyright\":\"Footer_footer__copyright__2gAmd\",\"footer__social\":\"Footer_footer__social__3uX2_\"};"],"sourceRoot":""}